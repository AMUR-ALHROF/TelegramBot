import os
import logging
from flask import Flask, request, abort # ุฃุถููุง request ู abort
import asyncio # ูุถูุงู ุนูู ุงูุนูููุงุช ุบูุฑ ุงููุชุฒุงููุฉ ุจุดูู ุตุญูุญ

# ุงุณุชูุฑุงุฏ ููููุงุช ุงูุจูุช ุงูุฎุงุตุฉ ุจู
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler
)

from config import Config # ููุชุฃูุฏ ูู ุงุณุชูุฑุงุฏ ุฅุนุฏุงุฏุงุช ุงูุชููู ูุงูููุงุชูุญ
from ai_analyzer import AIAnalyzer
from treasure_hunter import TreasureHunterGuide
from utils import RateLimiter, image_to_base64, format_response, escape_markdown
from database import DatabaseManager
from leaderboard import LeaderboardManager

# ุฅุนุฏุงุฏ ุงูุณุฌู
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ุชููุฆุฉ ุชุทุจูู Flask
app = Flask(__name__)

# ุชููุฆุฉ ุงูุจูุช ูููููุงุชู
class TreasureHunterBot:
    """Main bot class for treasure hunting assistance"""

    def __init__(self):
        """Initialize the bot with required components"""
        # Validate configuration (ูุฐุง ุณูุถูู ุงูุชุญูู ูู ูุฌูุฏ TELEGRAM_BOT_TOKEN ู OPENAI_API_KEY)
        try:
            Config.validate()
            logger.info("Configuration validated successfully.")
        except ValueError as e:
            logger.critical(f"Critical configuration error: {e}")
            # ููููู ุงุฎุชูุงุฑ ุฅููุงุก ุงูุชุทุจูู ููุง ุฅุฐุง ูุงูุช ุงููุชุบูุฑุงุช ุงูุฃุณุงุณูุฉ ููููุฏุฉ
            # sys.exit(1)

        # Initialize components
        self.ai_analyzer = AIAnalyzer(Config.OPENAI_API_KEY)
        self.treasure_guide = TreasureHunterGuide()
        self.rate_limiter = RateLimiter(Config.MAX_REQUESTS_PER_MINUTE)

        # Initialize database and leaderboard
        self.db_manager = DatabaseManager()
        self.leaderboard = LeaderboardManager(self.db_manager)

        # Initialize Telegram application
        # ูุณุชุฎุฏู Application.builder().updater(None).build() ูู Webhook
        # ุซู ูุถุจุท update_queue ูุฏููุงู ุนูุฏ ุชููู ุงูุชุญุฏูุซุงุช
        self.application = Application.builder().token(Config.TELEGRAM_BOT_TOKEN).build()

        # Setup handlers
        self._setup_handlers()

    def _setup_handlers(self):
        """Setup all command and message handlers"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        # ุฃุถู ููุง ุจุงูู ุงููุนุงูุฌุงุช (handlers) ุงูุชู ูุฏูู ูู ุจูุชู
        # self.application.add_handler(MessageHandler(filters.PHOTO & ~filters.COMMAND, self.photo_message_handler))
        # self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.text_message_handler))
        # self.application.add_handler(CallbackQueryHandler(self.callback_query_handler))

    # ูุฌุจ ุฃู ุชููู ูุฐู ุงูุฏูุงู (ุฃูุงูุฑ ุงูุจูุช) ุฏุงุฎู TreasureHunterBot
    # ุฃุถู ููุง ุฌููุน ุฏูุงู ูุนุงูุฌุฉ ุงูุฃูุงูุฑ ูุงูุฑุณุงุฆู ุงูุชู ูุฏูู
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Sends a welcome message when the command /start is issued."""
        user = update.effective_user
        if user:
            logger.info(f"Received /start command from user: {user.id} ({user.full_name})")
            await update.message.reply_html(
                rf"ุฃููุงู ุจู {escape_markdown(user.first_name)}! ๐"
                + "\nุฃูุง ููุง ูุฃุณุงุนุฏู ูู ุฑุญูุฉ ุงูุจุญุซ ุนู ุงููููุฒ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("ุงุจุฏุฃ ุงูุจุญุซ ๐", callback_data="start_hunt")]
                ])
            )
        else:
            logger.warning("Received /start command but effective_user is None.")
            await update.message.reply_text("ุฃููุงู ุจู! ุฃูุง ููุง ูุฃุณุงุนุฏู ูู ุฑุญูุฉ ุงูุจุญุซ ุนู ุงููููุฒ.")


# ุฅูุดุงุก ูุงุฆู ุงูุจูุช (instance)
bot_instance = TreasureHunterBot()

# ุฑุจุท Flask ุจุงูู Webhook ุงูุฎุงุต ุจู Telegram
@app.route('/webhook', methods=['POST'])
async def webhook(): # ูุฌุจ ุฃู ุชููู ุฏุงูุฉ async ููุนุงูุฌุฉ Update.de_json ู put
    if request.method == "POST":
        update_json = request.get_json()
        if not update_json:
            logger.warning("Received POST request without JSON data.")
            abort(400) # Bad Request

        logger.info(f"Received webhook update: {update_json.get('update_id')}")

        try:
            # ูู ุจูุนุงูุฌุฉ ุงูุชุญุฏูุซ ุจุงุณุชุฎุฏุงู application.process_update
            # ุฃู ุฅุถุงูุฉ ุงูุชุญุฏูุซ ุฅูู queue ุฅุฐุง ูุงู application ูุนูู ูู ุญููุฉ ุญุฏุซ ูููุตูุฉ
            # ูู ูุฐุง ุงูุฅุนุฏุงุฏุ ุณูุณุชุฎุฏู process_update ูุจุงุดุฑุฉ
            update = Update.de_json(update_json, bot_instance.application.bot)
            await bot_instance.application.process_update(update)
            return 'ok'
        except Exception as e:
            logger.error(f"Error processing webhook update: {e}", exc_info=True)
            abort(500) # Internal Server Error
    return 'Method Not Allowed', 405

@app.route('/')
def home():
    logger.info("Home route accessed. Flask is responding.")
    return "โ ุฎุฏูุฉ ุงูููุจ (Flask) ุชุนูู ุจูุฌุงุญ."

# ูุฐุง ุงูุฌุฒุก ุถุฑูุฑู ูุชุดุบูู ุชุทุจูู Flask ุจูุงุณุทุฉ Gunicorn
# Gunicorn ุณูุณุชุฏุนู app ูู ูุฐุง ุงููููุ ูุฐูู ูุง ูุญุชุงุฌ ูู app.run ููุง
# ููุญุชุงุฌ ููุท ูุชุนููู ุงูู webhook ุนูุฏ ุจุฏุก ุงูุชุทุจูู
if __name__ != '__main__':
    logger.info("main.py is being imported by Gunicorn. Flask app is ready.")
    # ุนูุฏ ุจุฏุก Gunicornุ ูู ุจุชุนููู ุงูููุจ ููู ูุฑุฉ ูุงุญุฏุฉ ููุท
    # ุชุฃูุฏ ูู ุฃู ูุฐุง ูุชู ูุฑุฉ ูุงุญุฏุฉ ููุท ุนูุฏ ุจุฏุก ุชุดุบูู ุงูุฎุงุฏู
    async def set_webhook_on_startup():
        webhook_url = os.environ.get("RENDER_EXTERNAL_HOSTNAME") # Render ูููุฑ ูุฐุง ุงููุชุบูุฑ
        if webhook_url:
            full_webhook_url = f"https://{webhook_url}/webhook" # /webhook ูู ุงููุณุงุฑ ุงูุฐู ุญุฏุฏูุงู
            logger.info(f"Attempting to set webhook to: {full_webhook_url}")
            try:
                await bot_instance.application.bot.set_webhook(url=full_webhook_url)
                logger.info("Webhook set successfully.")
                # ููููู ุฅุถุงูุฉ ุงุณุชุฏุนุงุก ูู getWebhookInfo ููุง ููุชุญูู ุงูููุฑู
                info = await bot_instance.application.bot.get_webhook_info()
                logger.info(f"Webhook info after setting: {info.to_dict()}")
            except Exception as e:
                logger.error(f"Failed to set webhook: {e}", exc_info=True)
        else:
            logger.warning("RENDER_EXTERNAL_HOSTNAME environment variable not found. Webhook may not be set.")

    # ูู ุจุชุดุบูู ุฏุงูุฉ ุชุนููู ุงูููุจ ููู ุนูุฏ ุจุฏุก ุชุดุบูู Gunicorn
    # ูุฐุง ูุชุทูุจ ุชุดุบูู ุญุฏุซ asyncio.run ุฃู loop.run_until_complete
    # ูููู ุงูุทุฑููุฉ ุงูุฃุจุณุท ูู ุฌุนู Gunicorn ูุณุชุฏุนู Flask appุ ูุงูููุงู ูุชููู ุงูููุจ ููู
    # ุณูุณุชุฎุฏู ุทุฑููุฉ ุจุณูุทุฉ ูุถูุงู ุชุดุบูู ุงูู webhook ุนูุฏ ุจุฏุก ุงูุฎุฏูุฉ.
    # ูููููุง ุฅุถุงูุฉ ุฐูู ูู ุฏุงูุฉ start_command ุฃู ูู __init__ ููู TreasureHunterBot
    # ูููู ูุถูุงู ุฃููุง ุชุนูู ุนูุฏ ุจุฏุก Gunicornุ ุณููุนููุง ูู background task
    # Note: This is a simplified approach. For robust webhook management in production
    # you might want to use a separate script or a dedicated webhook setup endpoint.

    # ูุชุดุบูู ุงูููุฏ ุบูุฑ ุงููุชุฒุงูู ุนูุฏ ุจุฏุก ุงูุชุดุบููุ ูุญุชุงุฌ ุฅูู Event Loop.
    # ุจูุง ุฃู gunicorn ูุดุบู Flaskุ ูููููุง ุงุณุชุฎุฏุงู thread pool ูุชุดุบูู ุงูู async code
    # ุฃู ุจุจุณุงุทุฉ ุชุฑู ุชุนููู ุงูู webhook ูุฏููุงู ุฃููุงู.
    # ุงูุทุฑููุฉ ุงูุฃูุซุฑ ุดููุนุงู ูู ุชุนููู ุงูู webhook ูุฑุฉ ูุงุญุฏุฉ ููุท ุนูุฏ ุงููุดุฑ ูุฏููุงู ุฃู ุนุจุฑ GitHub Action.
    # ูููู ุฅุฐุง ููุช ุชุฑูุฏู ุฃู ููุนููู ูู ูู ูุฑุฉ ูุจุฏุฃ ูููุง ุงูุฎุงุฏู:
    # ุณูุชู ุชุดุบูู ูุฐุง ุงูููุฏ ุนูุฏูุง ูุชู ุงุณุชูุฑุงุฏ main.py ุจูุงุณุทุฉ gunicorn
    # ุชุฃูุฏ ูู ุฃูู ุชุณุชุฎุฏู python-telegram-bot v20.x+ ุงูุชู ุชุฏุนู async/await

    # ูุง ูููู ุงุณุชุฏุนุงุก asyncio.run() ูุจุงุดุฑุฉ ููุง ูุฃู gunicorn ูุฏูุฑ ุงูู event loop ุงูุฎุงุต ุจู
    # ุงูุฃูุถู ูู ุชุนููู ุงูููุจ ููู ูุฏููุงู ุฃู ุนูุฏ ุฃูู ุทูุจ ููุฑูุช /
    # ุฃู ููููู ุงุณุชุฎุฏุงู ููุชุจุฉ ูุซู aiohttp ูุน Flask ุฅุฐุง ููุช ุชุฑูุฏ ุชุนููู ููุจ ููู async ุนูุฏ ุงูุจุฏุก
    # ููุทุฑููุฉ ุงููุจุณุทุฉ: ุชุฃูุฏ ูู ุฃู ุงูููุจ ููู ูุชู ุชุนูููู ูุฏููุงู ุฃู ุนู ุทุฑูู ุชุดุบูู ุณูุฑูุจุช ูููุตู ูุฑุฉ ูุงุญุฏุฉ.
    pass # ูุง ุชูุนู ุดูุฆุงู ููุงุ gunicorn ุณูุชููู ุชุดุบูู Flask

else:
    # ูุฐุง ุงูุฌุฒุก ููุชุดุบูู ุงููุญูู ุงููุจุงุดุฑ (ููุณ ุถุฑูุฑูุงู ูู Render)
    # ููุง ุณูุณุชุฎุฏู long polling ููุชุดุบูู ุงููุญูู ุงูุณูู
    logger.info("main.py is being run directly. Running bot with long polling locally.")
    async def run_local_bot():
        # ูุชุดุบูู ุงูุจูุช ูุญูููุง ุจุงุณุชุฎุฏุงู long polling
        await bot_instance.application.run_polling(drop_pending_updates=True)

    # ุชุดุบูู Flask app (ุงูุฐู ุณูุณุชูุน ุนูู ุงููุณุงุฑ /)
    # ูุชุดุบูู ุงูุจูุช ูู ููุณ ุงูููุช (ุฅุฐุง ูู ุชูู ุชุณุชุฎุฏู webhooks ูุญููุงู)
    # ูููููุง ุชุดุบูู ุงูุงุซููู ูุนุงู ุจุงุณุชุฎุฏุงู asyncio.gather
    async def main_local():
        # ุชุดุบูู Flask ูู Event Loop ุงูุฎุงุต ุจู (ููุณ ูุซุงููุงูุ ููู ูุบุฑุถ ุงูุชูุถูุญ)
        # ุฃู ูููู ุชุดุบูู Flask ุจุดูู ูููุตู ูุชุฑู ุงูุจูุช ูุนูู ุจู long polling
        # ููุญุตูู ุนูู setup ูุงูู ูุน webhook ูุญููุงูุ ุณุชุญุชุงุฌ ุฅูู ngrok ุฃู ูุง ุดุงุจู
        # ูููู ุจูุง ุฃู ุงููุฏู ูู Render (webhook)ุ ูุฅู ูุฐุง ุงูุฌุฒุก ูู ููุท ููุชุฌุฑุจุฉ ุงููุญููุฉ
        await run_local_bot() # ูู ุจุชุดุบูู ุงูุจูุช ุจู long polling ูุญููุงู

    # ุจุฏุก ุชุดุบูู ุงูุชุทุจูู ุบูุฑ ุงููุชุฒุงูู
    # ูุฌุจ ุฃู ุชุชุฃูุฏ ุฃู ูุฐุง ูู ุงูููุงู ุงููุญูุฏ ุงูุฐู ูุชู ููู ุชุดุบูู asyncio.run()
    # ูุชุดุบูู flask ูุน gunicorn ูุง ุชุญุชุงุฌ ุงูู asyncio.run ูู ูุฐุง ุงูุณูุงู
    asyncio.run(main_local())
